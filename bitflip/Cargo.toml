[package]
name = "bitflip"
version = { workspace = true }
edition = { workspace = true }

[lints]
workspace = true

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
anyhow = { workspace = true }
axum = { workspace = true, optional = true }
bitflip_client = { workspace = true }
bitflip_program = { workspace = true, features = ["serde", "no-entrypoint", "client"] }
codee = { workspace = true }
console_error_panic_hook.workspace = true
console_log.workspace = true
http.workspace = true
js-sys = { workspace = true }
leptos = { workspace = true, features = ["tracing", "nightly", "experimental-islands"] }
leptos-use = { workspace = true }
leptos_axum = { workspace = true, optional = true, features = ["islands-router"] }
leptos_meta = { workspace = true }
leptos_router = { workspace = true, features = ["nightly"] }
log = { workspace = true }
mime_guess = { workspace = true, optional = true }
rand = { workspace = true }
rust-embed = { workspace = true, features = ["axum", "mime_guess", "tokio"], optional = true }
simple_logger = { workspace = true }
thiserror.workspace = true
tiny-skia = { workspace = true, optional = true }
tokio = { workspace = true, features = ["rt-multi-thread"], optional = true }
tower = { workspace = true, optional = true }
tower-http = { workspace = true, features = ["fs", "compression-gzip", "compression-br"], optional = true }
tracing = { workspace = true, optional = true }
wallet_standard_browser = { workspace = true, features = ["solana"] }
wasm-bindgen.workspace = true
wasm_client_anchor = { workspace = true }
wasm_client_solana = { workspace = true }
web-sys = { workspace = true, features = ["CanvasRenderingContext2d", "Document", "Element", "HtmlCanvasElement", "ImageData", "Window"] }

[features]
csr = ["bitflip_client/js", "leptos/csr", "wasm_client_solana/js", "codee/json_serde_wasm"]
hydrate = ["bitflip_client/js", "leptos/hydrate", "wasm_client_solana/js", "codee/json_serde_wasm"]
ssr = [
	"bitflip_client/ssr",
	"dep:axum",
	"dep:rust-embed",
	"dep:tokio",
	"dep:tower",
	"dep:tower-http",
	"dep:leptos_axum",
	"leptos/ssr",
	"leptos_meta/ssr",
	"leptos_router/ssr",
	"codee/json_serde",
	"dep:tracing",
	"dep:tiny-skia",
]

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "bitflip"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site/bitflip"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/output.css"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
watch-additional-files = ["style/output.css"]
